---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# make-action
name: "üõ†Ô∏è Runs make"
description: "Executes the steps described in a Makefile"

inputs:
  # Optional
  repository:
    # Uses actions/checkout to clone the repository
    description: "Remote Git repository URL to download"
    required: false
    type: 'string'
  path:
    description: "Download the repository to this local filesystem path"
    required: false
    type: 'string'
  makefile_path:
    description: "Directory path to target Makefile"
    required: false
    type: 'string'
  make_args:
    description: 'Arguments/flags sent to make command'
    required: false
    type: 'string'

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment

        make_cmd=$(which make)
        if [ ! -x "$make_cmd" ]; then
          echo "Error: make command not found ‚ùå"
          exit 1
        fi

        # Output build heading
        echo "# üî® Make Action" >> "$GITHUB_STEP_SUMMARY"

        # Set build parameters/variables
        echo "Action triggered by: ${GITHUB_TRIGGERING_ACTOR}"
        datetime=$(date +'%Y-%m-%d-%H%M')
        echo "Date and time stamp: $datetime"
        echo "datetime=$datetime" >> "$GITHUB_ENV"
        echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"

    - name: "Clone repository"
      if: inputs.repository_url != ''
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        path: ${{ inputs.path }}

    - name: "Running make"
      shell: bash
      run: |
        # Running make

        if [ -n "${{ inputs.repository }}" ]; then
          REPO=$(basename ${{ inputs.repository }})
          MAKE_PATH="$REPO/${{ inputs.path }}"
        fi

        if [ -n "${{ inputs.makefile_path }}" ]; then
          MAKE_PATH="$MAKE_PATH/${{ inputs.makefile_path }}"
        fi

        if [ -n "$MAKE_PATH" ] && [ -d "$MAKE_PATH" ]; then
          echo "Changing to directory: $MAKE_PATH üí¨"
          cd "$MAKE_PATH"
        elif [ -n "$MAKE_PATH" ]; then
          echo "Error: target path is not a valid directory ‚ùå"
          exit 1
        fi

        echo "Running: make ${{ inputs.make_args }}"
        make ${{ inputs.make_args }}
